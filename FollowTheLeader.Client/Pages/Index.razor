@page "/"
@inject IConfiguration Config
@inject IJSRuntime JSRuntime
@inject IWebAssemblyHostEnvironment Environment

<PageTitle>Follow The Leader 🛣️</PageTitle>

@if (game is null) return;

@if (game.IsStarted && haveJoined)
{
    <div style="position:relative;">
        @if (game.Rounds.Any(r => r.Time > 0))
        {
            <div style="position:absolute;width:100%;font-size:30px;display:flex;justify-content:center;pointer-events:none;">
                <svg width="100" height="100" viewBox="-2 -2 4 4">
                    <circle cx="0" cy="0" r="1.5" fill="black" opacity="0.5"></circle>
                    <path fill="white" d="M 0 0 v -1 A 1 1 0 @(game.Rounds.First(r => r.Time > 0).Time < Round.StartTime / 2 ? "0" : "1") 0 @((-Math.Sin((double)game.Rounds.First(r => r.Time > 0).Time/(double)Round.StartTime*2*Math.PI)).AsString()) @((-Math.Cos((double)game.Rounds.First(r => r.Time > 0).Time/(double)Round.StartTime*2*Math.PI)).AsString())"></path>
                </svg>
            </div>
            <div style="position:absolute;width:100%;display:flex;justify-content:end;font-size:30px;pointer-events:none;">
                <div style="position:relative;border-radius:10;background-color:rgba(0, 0, 0, 0.5);width:400px;">
                    <h2 style="text-align:center;">
                        Round @(game.Rounds.IndexOf(game.Rounds.First(r => r.Time > 0)) + 1) / @game.Rounds.Count
                    </h2>
                    @foreach (var (k, v) in game.Rounds.First(r => r.Time > 0).Points.OrderByDescending(p => p.Value))
                    {
                        var player = game.Players.FirstOrDefault(p => p.ConnectionID == k);
                        if (player is null) continue;
                        var style = k == hubConnection.ConnectionId ? "font-weight:800;text-decoration:underline;" : "";
                        <div class="row" style="font-family:monospace;width:400px;">
                            <div class="col" style="@style;color:@player.Color;">
                                @if (k == hubConnection.ConnectionId)
                                {
                                    <svg width="30" height="30" viewBox="-2.5 -2.5 5 5">
                                        <circle stroke="white" stroke-width="0.5" cx="0" cy="0" r="2" fill="@player.Color"></circle>
                                        <path stroke="black" stroke-width="0.2" fill="@player.DecorationFill" d="M 0 0 @player.Decoration"></path>
                                    </svg>
                                }
                                else
                                {
                                    <svg width="30" height="30" viewBox="-2.5 -2.5 5 5">
                                        <circle cx="0" cy="0" r="2" fill="@player.Color"></circle>
                                        <path stroke="black" stroke-width="0.2" fill="@player.DecorationFill" d="M 0 0 @player.Decoration"></path>
                                    </svg>
                                }
                                @player.Name:
                            </div>
                            <div class="col">
                                @v
                            </div>
                        </div>
                    }
                </div>
            </div>
        }

        <svg @ref="@svgElement" @onkeydown=KeyDown @onkeyup=KeyUp width="100vw" height="100vh" viewBox="@minXWithPadding.AsString() @minYWithPadding.AsString() @widthWithPadding.AsString() @heightWithPadding.AsString()" tabindex="-1">
            <filter id="noise" x="0%" y="0%" width="100%" height="100%">
                <feTurbulence baseFrequency="0.1"></feTurbulence>
            </filter>

            <rect x="@bgX.AsString()" y="@bgY.AsString()" width="@bgWidth.AsString()" height="@bgHeight.AsString()" filter="url(#noise)" fill="none"></rect>
            @foreach (Player player in game.Players)
            {
                var isMe = player.ConnectionID == hubConnection.ConnectionId;
                <path stroke-width="2" stroke="@player.Color" stroke-linecap="round" d="@BodyPath(player.Body.ToArray())" fill="transparent"></path>
                <circle r="2" fill="@player.Color" cx="@player.Head.X.AsString()" cy="@player.Head.Y.AsString()" stroke="white" stroke-width="@(isMe ? "0.5" : "0")"></circle>
                <path stroke="black" stroke-width="0.2" fill="@player.DecorationFill" d="M @player.Head.X.AsString() @player.Head.Y.AsString() @player.Decoration"></path>
                @if (game.Rounds.Any(r => r.Time > 0) && player.ConnectionID == game.Rounds.First(r => r.Time > 0).Leader)
                {
                    <path stroke="black" stroke-width="0.5" fill="#FFEB3C" d="M @player.Head.X.AsString() @player.Head.Y.AsString() m -2 -1 l 0 -2 l 1 1 l 1 -1 l 1 1 l 1 -1 l 0 2 Z"></path>
                }
            }
        </svg>
    </div>
}
else
{
    <div style="height:100vh;display:flex;justify-content:center;align-items:center;">
        <div>
            <h1 style="text-align:center;">
                Follow The Leader 🛣️
            </h1>
            <div style="display:flex;justify-content:center;">
                <div>
                    <h2 style="text-align:center;">
                        Players
                        <hr />
                    </h2>
                    <h3>
                        @foreach (Player player in game.Players)
                        {
                            <div>
                                @if (player.ConnectionID == hubConnection.ConnectionId)
                                {
                                    <svg width="30" height="30" viewBox="-2.5 -2.5 5 5">
                                        <circle stroke="white" stroke-width="0.5" cx="0" cy="0" r="2" fill="@player.Color"></circle>
                                        <path stroke="black" stroke-width="0.2" fill="@player.DecorationFill" d="M 0 0 @player.Decoration"></path>
                                    </svg>
                                    <span style="color:@player.Color;font-weight:800;text-decoration:underline;">
                                        @player.Name
                                        <span @onclick="ReRoll">🎲</span>
                                    </span>
                                }
                                else
                                {
                                    <svg width="30" height="30" viewBox="-2.5 -2.5 5 5">
                                        <circle cx="0" cy="0" r="2" fill="@player.Color"></circle>
                                        <path stroke="black" stroke-width="0.2" fill="@player.DecorationFill" d="M 0 0 @player.Decoration"></path>
                                    </svg>
                                    <span style="color:@player.Color;">
                                        @player.Name
                                    </span>
                                }
                            </div>
                        }
                    </h3>
                </div>
            </div>
            @if (haveJoined)
            {
                <div style="display:flex;justify-content:center;">
                    <button class="btn btn-success btn-lg" @onclick="StartGame">Start Game</button>
                </div>
                @if (game.ScoreBoard is not null)
                {
                    <div style="display:flex;justify-content:center;">
                        <div>
                            <h2 style="text-align:center;margin-top:20px;">
                                Scoreboard
                                <hr />
                            </h2>
                            <h3>
                                @foreach (var x in game.ScoreBoard.OrderByDescending(p => p.Value).Select((Entry, Index) => new { Entry, Index }))
                                {
                                    var player = game.Players.FirstOrDefault(p => p.ConnectionID == x.Entry.Key);
                                    if (player is null) continue;
                                    var style = x.Entry.Key == hubConnection.ConnectionId ? "font-weight:800;text-decoration:underline;" : "";
                                    <div class="row" style="font-family:monospace;width:400px;">
                                        <div class="col" style="@style;color:@player.Color;">
                                            <nobr>
                                                <b style="margin-right:10px">@(x.Index + 1).</b>
                                                <svg width="30" height="30" viewBox="-2.5 -2.5 5 5">
                                                    <circle cx="0" cy="0" r="2" fill="@player.Color"></circle>
                                                    <path stroke="black" stroke-width="0.2" fill="@player.DecorationFill" d="M 0 0 @player.Decoration"></path>
                                                </svg>
                                                @player.Name:
                                            </nobr>
                                        </div>
                                        <div class="col">
                                            @x.Entry.Value
                                        </div>
                                    </div>
                                }
                            </h3>
                        </div>
                    </div>
                }
            }
            else
            {
                <div style="display:flex;justify-content:center;">
                    <h2>One game is already active. It will be done in @game.Rounds.Sum(r => r.Time).AsString() seconds.</h2>
                </div>
            }
        </div>
    </div>
}

@code {
    ElementReference svgElement;
    HubConnection hubConnection;
    Game? game;
    HashSet<string> keys = new();
    List<Obstacle> obstacles = new();
    bool haveJoined = false;
    bool gameStartedBefore = false;
    double minXWithPadding;
    double minYWithPadding;
    double widthWithPadding;
    double heightWithPadding;

    //background things
    double bgX;
    double bgY;
    double bgWidth;
    double bgHeight;

    protected override async Task OnInitializedAsync()
    {
        var signalrUrl = Environment.IsProduction() ? Config.GetConnectionString("ProductionSignalRUrl") : Config.GetConnectionString("DevelopSignalRUrl");
        hubConnection = new HubConnectionBuilder().WithUrl(signalrUrl!).WithAutomaticReconnect().Build();

        hubConnection.On<Game>("Update", async (game) =>
        {
            this.game = game;
            minXWithPadding = game.Players.SelectMany(p => p.Body.Select(b => b.X)).Min() - 10;
            minYWithPadding = game.Players.SelectMany(p => p.Body.Select(b => b.Y)).Min() - 10;
            widthWithPadding = game.Players.SelectMany(p => p.Body.Select(b => b.X)).Max() + 10 - minXWithPadding;
            heightWithPadding = game.Players.SelectMany(p => p.Body.Select(b => b.Y)).Max() + 10 - minYWithPadding;
            if (widthWithPadding / heightWithPadding < 21.0 / 9.0)
            {
                // Height is too small
                var offset = heightWithPadding * 21.0 / 9.0 / 2;
                bgX = minXWithPadding - offset;
                bgWidth = widthWithPadding + offset * 2;
                bgY = minYWithPadding;
                bgHeight = heightWithPadding;
            }
            else
            {
                // Width is too small
                bgX = minXWithPadding;
                bgWidth = widthWithPadding;
                bgY = minYWithPadding;
                bgHeight = heightWithPadding;
            }
            StateHasChanged();
            if (!gameStartedBefore && game.IsStarted) {
                await Task.Delay(500);
                await svgElement.FocusAsync();
            }
            gameStartedBefore = game.IsStarted;
            Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(game.ScoreBoard));
        });

        hubConnection.On("Sound", async (double freq, int durr) =>
        {
            await JSRuntime.InvokeVoidAsync("sound", freq, durr);
        });

        await hubConnection.StartAsync();

        await Task.Run(async () =>
        {
            while (true)
            {
                if (!haveJoined && await hubConnection.InvokeAsync<bool>("ReadyToJoin"))
                {
                    await hubConnection.SendAsync("Join");
                    haveJoined = true;
                }

                var direction = 0;
                if (keys.Contains("ArrowLeft") && keys.Contains("ArrowRight"))
                {
                    direction = 0;
                }
                else if (keys.Contains("ArrowRight"))
                {
                    direction = -1;
                }
                else if (keys.Contains("ArrowLeft"))
                {
                    direction = 1;
                }
                await hubConnection.SendAsync("Direction", direction);

                var speed = 0;
                if (keys.Contains("ArrowDown"))
                {
                    speed = -1;
                }
                else if (keys.Contains("ArrowUp"))
                {
                    speed = 1;
                }
                await hubConnection.SendAsync("Speed", speed);

                if (game?.Starter == hubConnection.ConnectionId)
                {
                    if (game.Rounds.Any(r => r.Time > 0))
                    {
                        await hubConnection.SendAsync("Iterate");
                    }
                    else
                    {
                        await hubConnection.SendAsync("Stop");
                    }
                }

                await Task.Delay(20);
            }
        });
    }

    private async Task StartGame()
    {
        await hubConnection.SendAsync("StartGame");
        StateHasChanged();
        await Task.Delay(500);
        await svgElement.FocusAsync();
    }

    private void KeyDown(KeyboardEventArgs eventArgs)
    {
        keys.Add(eventArgs.Code);
    }

    private void KeyUp(KeyboardEventArgs eventArgs)
    {
        keys.Remove(eventArgs.Code);
    }

    private string BodyPath(Position[] points)
    {
        // Parameter for smoothness of path in interval [0, 0.5]
        double smoothness = 1.0 / 3.0;

        var result = "";
        if (points.Length >= 2)
        {
            result = $"M {points[0].X.AsString()} {points[0].Y.AsString()} ";
            for (int i = 1; i < points.Length - 1; i++)
            {
                result += $"S {(points[i - 1].X * smoothness / 2 + points[i].X - points[i + 1].X * smoothness / 2).AsString()} {(points[i - 1].Y * smoothness / 2 + points[i].Y - points[i + 1].Y * smoothness / 2).AsString()} {points[i].X.AsString()} {points[i].Y.AsString()} ";
            }
            result += $"S {(points[^2].X * smoothness + points[^1].X * (1 - smoothness)).AsString()} {(points[^2].Y * smoothness + points[^1].Y * (1 - smoothness)).AsString()} {points[^1].X.AsString()} {points[^1].Y.AsString()} ";
        }
        return result;
    }

    private async Task ReRoll()
    {
        await hubConnection.SendAsync("ReRoll");
    }
}
